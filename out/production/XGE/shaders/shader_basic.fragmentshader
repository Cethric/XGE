#version 330 core

// Interpolated values from the vertex shaders
in vec3 FragmentColor;
in vec2 UV;
in vec4 ShadowCoord;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D DiffuseTexture;
uniform sampler2D NormalTexture;
uniform sampler2D SpecTexture;
uniform sampler2D shadowMap;
uniform mat4 MV;

vec4 diffuseColor() {
    float a = 1;
    if (UV == vec2(0,0)) {
        a = 0;
    }
    vec4 texUV = mix(vec4(FragmentColor.x, FragmentColor.y, FragmentColor.z, 1), texture( DiffuseTexture, UV ), vec4(a, a, a, 1));
    if (texUV.a <= 0.2) {
        discard;
    }
    return texUV;
}

void main() {
    // Material properties
    vec3 MaterialDiffuseColor = diffuseColor().rgb; //texture( DiffuseTexture, UV ).rgb;
    vec3 MaterialAmbientColor = vec3(0.4,0.4,0.4) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = mix(vec3(0.6, 0.6, 0.6), texture(SpecTexture, UV).rgb, vec3(0.5, 0.5, 0.5));
    vec3 MaterialColor =
            // Ambient : simulates indirect lighting
            MaterialAmbientColor +
            // Diffuse : "color" of the object
            MaterialDiffuseColor +
            // Specular : reflective highlight, like a mirror
            MaterialSpecularColor;
    
    // Do Shadows
    vec3 lightColor = vec3(1, 1, 1);
    float shadow = 1.0;
    vec4 shadowCoordinateWdivide = ShadowCoord / ShadowCoord.w;
    shadowCoordinateWdivide.z += 0.0005;
    float distanceFromLight = texture(shadowMap, shadowCoordinateWdivide.st).z;
    
    if (ShadowCoord.w > 0.0) {
        shadow = distanceFromLight < shadowCoordinateWdivide.z ? 0.0 : 0.5;
    }
    
    color.rgb = MaterialColor * shadow;
        
    color.a = diffuseColor().a;
}